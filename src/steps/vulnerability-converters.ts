import {
  InsightVmAssetVulnerability,
  Vulnerability,
  VulnerabilityState,
} from '../types';
import { entities } from '../constants';
import {
  createIntegrationEntity,
  Entity,
} from '@jupiterone/integration-sdk-core';

export function createAssetVulnerabilityEntity(
  finding: Pick<InsightVmAssetVulnerability, 'id' | 'status'>,
  vulnerability: Entity,
  assetId: string,
) {
  return createIntegrationEntity({
    entityData: {
      source: finding,
      assign: {
        _key: getAssetVulnerabilityKey(assetId, finding.id),
        _type: entities.FINDING._type,
        _class: entities.FINDING._class,
        id: `${finding.id}`,
        name: finding.id,
        category: 'host',
        open:
          finding.status === VulnerabilityState.VULNERABLE ? true : undefined,
        severity: vulnerability.severity,
        numericSeverity: vulnerability.numericSeverity,
      },
    },
  });
}

export function getVulnerabilityKey(id: string): string {
  return `insightvm_vulnerability:${id}`;
}

function getAssetVulnerabilityKey(
  assetId: string,
  assetVulnerabilityId: string,
) {
  return `insightvm_asset_vulnerability:${assetId}:${assetVulnerabilityId}`;
}

export function createVulnerabilityEntity(vulnerability: Vulnerability) {
  return createIntegrationEntity({
    entityData: {
      source: vulnerability,
      assign: {
        _key: getVulnerabilityKey(vulnerability.id),
        _type: entities.VULNERABILITY._type,
        _class: entities.VULNERABILITY._class,
        id: vulnerability.id,
        name: vulnerability.id,
        severity: vulnerability.severity,
        numericSeverity: vulnerability.severityScore,
        category: vulnerability.categories?.toString() || '',
        description: vulnerability.description?.text,
        exploits: vulnerability.exploits,
        // Response doesn't contain these attributes
        // but are needed for data model:
        blocking: false,
        open: false,
        production: false,
        public: true,
      },
    },
  });
}
